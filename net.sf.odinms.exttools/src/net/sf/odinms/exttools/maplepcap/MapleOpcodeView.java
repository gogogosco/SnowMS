/*
	This file is part of the OdinMS Maple Story Server
    Copyright (C) 2008 Patrick Huy <patrick.huy@frz.cc> 
                       Matthias Butz <matze@odinms.de>
                       Jan Christian Meyer <vimes@odinms.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License version 3
    as published by the Free Software Foundation. You may not use, modify
    or distribute this program under any other version of the
    GNU Affero General Public License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package net.sf.odinms.exttools.maplepcap;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import net.sf.odinms.net.ExternalCodeTableGetter;
import net.sf.odinms.net.RecvPacketOpcode;
import net.sf.odinms.net.SendPacketOpcode;
import net.sf.odinms.tools.HexTool;

/**
 *
 * @author  Raz
 */
public class MapleOpcodeView extends javax.swing.JFrame {

	private static final long serialVersionUID = 4536565449956576701L;
	private boolean showSend = true;
    private static List<Object[]> sendTableData = null;
    private static List<Object[]> recvTableData = null;

    /** Creates new form MapleOpcodeView */
    public MapleOpcodeView() {
	try {
	    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
	} catch (Exception e) {
	    e.printStackTrace();
	}
	initComponents();
	updateTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        sendOpcodeRadioButton = new javax.swing.JRadioButton();
        receiveOpcodeRadioButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        opcodeTable = new javax.swing.JTable();
        closeButton = new javax.swing.JButton();
        updateHeadersButton = new javax.swing.JButton();
        totalOpcodeLabel = new javax.swing.JLabel();
        saveChangesButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Snow's Packet Header Viewer");
        setResizable(false);

        buttonGroup1.add(sendOpcodeRadioButton);
        sendOpcodeRadioButton.setSelected(true);
        sendOpcodeRadioButton.setText("Send Opcodes");
        sendOpcodeRadioButton.setToolTipText("Show the send packet opcodes");
        sendOpcodeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendOpcodeRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(receiveOpcodeRadioButton);
        receiveOpcodeRadioButton.setText("Receive Opcodes");
        receiveOpcodeRadioButton.setToolTipText("Show the receive packet opcodes");
        receiveOpcodeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiveOpcodeRadioButtonActionPerformed(evt);
            }
        });

        opcodeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        opcodeTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(opcodeTable);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        updateHeadersButton.setText("Update Headers");
        updateHeadersButton.setToolTipText("Update Headers");
        updateHeadersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateHeadersButtonActionPerformed(evt);
            }
        });

        totalOpcodeLabel.setText("Total: 0");

        saveChangesButton.setText("Save Changes");
        saveChangesButton.setToolTipText("Save Header Changes");
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendOpcodeRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(totalOpcodeLabel)
                        .addGap(35, 35, 35)
                        .addComponent(receiveOpcodeRadioButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(updateHeadersButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveChangesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(closeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sendOpcodeRadioButton)
                        .addComponent(receiveOpcodeRadioButton))
                    .addComponent(totalOpcodeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(updateHeadersButton)
                    .addComponent(saveChangesButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
	private void sendOpcodeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendOpcodeRadioButtonActionPerformed
	//SEND
	if (sendOpcodeRadioButton.isSelected()) {
	    showSend = true;
	    updateTable();
	}
}//GEN-LAST:event_sendOpcodeRadioButtonActionPerformed

	private void receiveOpcodeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiveOpcodeRadioButtonActionPerformed
	//RECEIVE
	if (receiveOpcodeRadioButton.isSelected()) {
	    showSend = false;
	    updateTable();
	}
}//GEN-LAST:event_receiveOpcodeRadioButtonActionPerformed

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
	//CLOSE
	setVisible(false);
}//GEN-LAST:event_closeButtonActionPerformed

	private void updateHeadersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateHeadersButtonActionPerformed
	//UPDATE
	try {
	    sendTableData = null;
	    recvTableData = null;
	    ExternalCodeTableGetter.populateValues(SendPacketOpcode.getDefaultProperties(), SendPacketOpcode.values());
	    ExternalCodeTableGetter.populateValues(RecvPacketOpcode.getDefaultProperties(), RecvPacketOpcode.values());
	    updateTable();
	    JOptionPane.showMessageDialog(null, "Packet Headers Updated Successfully.", "Update Successful", JOptionPane.INFORMATION_MESSAGE);
	} catch (Exception e) {
	    JOptionPane.showMessageDialog(null, "Error Updating Packet Headers.", "Update Error", JOptionPane.ERROR_MESSAGE);
	}
}//GEN-LAST:event_updateHeadersButtonActionPerformed

	private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed
    //SAVE
	
}//GEN-LAST:event_saveChangesButtonActionPerformed

    public void updateTable() {
	DefaultTableModel dtm = (DefaultTableModel) opcodeTable.getModel();
	if (dtm.getRowCount() > 0) {
	    dtm.getDataVector().removeAllElements();
	}

	if (showSend) {
	    if (sendTableData == null) {
		sendTableData = getRowData();
	    }
	} else {
	    if (recvTableData == null) {
		recvTableData = getRowData();
	    }
	}
	List<Object[]> toUpdate = showSend ? sendTableData : recvTableData;
	for (Object[] rowData : toUpdate) {
	    dtm.addRow(rowData);
	}
	totalOpcodeLabel.setText("Total: " + toUpdate.size());

    }

    public List<Object[]> getRowData() {
	List<Object[]> ret = new ArrayList<Object[]>();
	if (showSend) {
	    for (SendPacketOpcode sOp : SendPacketOpcode.values()) {
		Object[] rowData = new Object[2];
		rowData[0] = sOp.name();
		rowData[1] = HexTool.getOpcodeToString((short) sOp.getValue());
		ret.add(rowData);
	    }
	} else {
	    for (RecvPacketOpcode rOp : RecvPacketOpcode.values()) {
		Object[] rowData = new Object[2];
		rowData[0] = rOp.name();
		rowData[1] = HexTool.getOpcodeToString((short) rOp.getValue());
		ret.add(rowData);
	    }
	}
	return ret;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	java.awt.EventQueue.invokeLater(new Runnable() {

	    public void run() {
		new MapleOpcodeView().setVisible(true);
	    }
	});
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable opcodeTable;
    private javax.swing.JRadioButton receiveOpcodeRadioButton;
    private javax.swing.JButton saveChangesButton;
    private javax.swing.JRadioButton sendOpcodeRadioButton;
    private javax.swing.JLabel totalOpcodeLabel;
    private javax.swing.JButton updateHeadersButton;
    // End of variables declaration//GEN-END:variables
}
