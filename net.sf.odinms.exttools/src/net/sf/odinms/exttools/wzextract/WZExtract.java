/*
	This file is part of the OdinMS Maple Story Server
    Copyright (C) 2008 Patrick Huy <patrick.huy@frz.cc> 
                       Matthias Butz <matze@odinms.de>
                       Jan Christian Meyer <vimes@odinms.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License version 3
    as published by the Free Software Foundation. You may not use, modify
    or distribute this program under any other version of the
    GNU Affero General Public License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package net.sf.odinms.exttools.wzextract;

import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

import net.sf.odinms.exttools.required.AnimatedGifEncoder;
import net.sf.odinms.exttools.required.SaveFileFilter;
import net.sf.odinms.provider.MapleData;
import net.sf.odinms.provider.MapleDataDirectoryEntry;
import net.sf.odinms.provider.MapleDataEntry;
import net.sf.odinms.provider.MapleDataProvider;
import net.sf.odinms.provider.MapleDataProviderFactory;
import net.sf.odinms.provider.MapleDataTool;
import net.sf.odinms.provider.MapleEmptyDataEntity;
import net.sf.odinms.provider.wz.ListWZFile;
import net.sf.odinms.provider.wz.MapleDataTreeNode;
import net.sf.odinms.provider.wz.MapleDataTreeNode.MapleNodeType;
import net.sf.odinms.provider.wz.WZIMGFile;
import net.sf.odinms.provider.wz.WZTool;
import net.sf.odinms.tools.MapRender;

/**
 *
 * @author  Raz
 */
public class WZExtract extends javax.swing.JFrame {

	private static final long serialVersionUID = 2386075953073918913L;
	private MapleDataTreeNode treeRoot;
	private int imgFilesCount = 0;
	private File fileOpenDirectory;
	private File fileSaveDirectory;
	private MapleData pngData = null;
	private MapleData mp3Data = null;
	private Map<String, BufferedImage> loadedImages = new HashMap<String, BufferedImage>();
	private List<MapleDataProvider> wzFiles = new ArrayList<MapleDataProvider>();

	/** Creates new form WZExtract */
	public WZExtract() {
		try {
			javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			e.printStackTrace();
		}
		initComponents();
		//setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/net/sf/odinms/exttools/images/MapleStoryMini.png")));
		initTreeSelectionListener();
		File mapleDir = new File("C:/Nexon/MapleStory");
		fileOpenDirectory = mapleDir.exists() ? mapleDir : null;
		treeRoot = new MapleDataTreeNode("Wz File Root");
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree(new MapleDataTreeNode("File Tree"), true);
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jCanvasLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Snow's WZExtract");
        setResizable(false);

        jTree1.setRootVisible(false);
        jScrollPane1.setViewportView(jTree1);

        jButton1.setText("Save MP3");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Save Map");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Type:");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Loading Time:");

        jLabel3.setText("Img Files:");

        jButton3.setText("Save PNG");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jCanvasLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jCanvasLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton4.setText("Save XML");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Animate GIF");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jMenu3.setText("File");

        jMenuItem8.setText("Open");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem10.setText("Quit");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuItem13.setText("Clear Loaded Files");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenuBar2.add(jMenu3);

        jMenu5.setText("Extras");

        jMenuItem4.setText("Collapse Tree");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuItem5.setText("Expand Tree");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuItem11.setText("File Information");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem11);

        jMenuBar2.add(jMenu5);

        jMenu6.setText("Help");

        jMenuItem12.setText("About");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem12);

        jMenuBar2.add(jMenu6);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jCanvasLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5))
                                .addGap(39, 39, 39))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(201, 201, 201))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCanvasLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
		//COLLAPSE TREE
		TreeNode root = (TreeNode) jTree1.getModel().getRoot();
		sortTree(jTree1, new TreePath(root), false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
		//EXPAND TREE
		TreeNode root = (TreeNode) jTree1.getModel().getRoot();
		sortTree(jTree1, new TreePath(root), true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
		//FILE INFORMATION
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
		//OPEN FILES
		JFileChooser fileChooser = new JFileChooser(new File("filename"));
		fileChooser.setCurrentDirectory(fileOpenDirectory);
		fileChooser.addChoosableFileFilter(new WZFileFilter());
		fileChooser.addChoosableFileFilter(new IMGFileFilter());
		if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			File file = fileChooser.getSelectedFile();
			fileOpenDirectory = file.getParentFile();
			System.setProperty("net.sf.odinms.wzpath", fileOpenDirectory.getAbsolutePath());
			if (file.getName().equals("Base.wz")) {
				loadAllFiles(file.getParentFile());
			} else if (file.getName().equals("List.wz")) {
				loadListWz(file);
			} else if (file.getName().endsWith(".img")) {
				loadIMGFile(file);
			} else {
				loadFile(file);
			}
		}
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
		//QUIT
		setVisible(false);
		dispose();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
		//ABOUT
		JOptionPane.showMessageDialog(null, "Snow's WZExtract", "Snow's WZExtract", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
		//SAVE PNG
		File pngFile = null;

		JFileChooser fileChooser = new JFileChooser(pngFile);
		fileChooser.setCurrentDirectory(fileSaveDirectory);
		SaveFileFilter fileFilter = new SaveFileFilter("PNG Image(*.png)");
		fileChooser.setFileFilter(fileFilter);
		if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			pngFile = fileChooser.getSelectedFile();
			fileSaveDirectory = pngFile.getParentFile();
		} else {
			return;
		}

		try {
			ImageIO.write(getImage(pngData), "png", pngFile);
		} catch (Exception e) {
			e.printStackTrace();
		}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		//SAVE MP3
		File mp3File = null;

		JFileChooser fileChooser = new JFileChooser(mp3File);
		fileChooser.setCurrentDirectory(fileSaveDirectory);
		SaveFileFilter fileFilter = new SaveFileFilter("MP3 File(*.mp3)");
		fileChooser.setFileFilter(fileFilter);
		if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			mp3File = fileChooser.getSelectedFile();
			fileSaveDirectory = mp3File.getParentFile();
		} else {
			return;
		}

		try {
			FileOutputStream fos = new FileOutputStream(mp3File);
			fos.write(MapleDataTool.getMp3Data(mp3Data));
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
		//SAVE MAP
		if (!isFileLoaded("Base.wz")) {
			JOptionPane.showMessageDialog(null, "Map rendering is only possible when Base.wz was opened", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		File mapFile = null;

		JFileChooser fileChooser = new JFileChooser(mapFile);
		fileChooser.setCurrentDirectory(fileSaveDirectory);
		SaveFileFilter fileFilter = new SaveFileFilter("PNG File(*.png)");
		fileChooser.setFileFilter(fileFilter);
		if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			mapFile = fileChooser.getSelectedFile();
			fileSaveDirectory = mapFile.getParentFile();
		} else {
			return;
		}

		try {
			MapleDataTreeNode node = (MapleDataTreeNode) jTree1.getLastSelectedPathComponent();
			BufferedImage mapData = MapRender.getInstance().renderMap(node.getData());
			if (mapData != null) {
				ImageIO.write(mapData, "png", mapFile);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
		//ANIMATE GIF
		//TODO
		MapleData parent = ((MapleDataTreeNode)jTree1.getLastSelectedPathComponent()).getData();
		AnimatedGifEncoder age = new AnimatedGifEncoder();
		age.start(parent.getParent().getName() + "." + parent.getName() + ".gif");
		age.setRepeat(0);
		age.setSize(1, 1);
		for(MapleData frame : parent.getIntegerNamedChildren()) {
		BufferedImage frameImg = MapleDataTool.getImage(frame);
		if (frameImg.getWidth() > age.getWidth()) {
			age.setSize(frameImg.getWidth(), age.getHeight());
		}
		if (frameImg.getHeight() > age.getHeight()) {
			age.setSize(age.getWidth(), frameImg.getHeight());
		}
		age.addFrame(MapleDataTool.getImage(frame));
		age.setDelay(MapleDataTool.getInt("delay", frame));

		}
		age.finish();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
		//DUMP XML
		try {
			XMLWzExtract xmlExtract = new XMLWzExtract(1, false, false, false);
			MapleData data = ((MapleDataTreeNode) jTree1.getLastSelectedPathComponent()).getData();
			FileOutputStream fos = new FileOutputStream(new File(data.getName() + ".xml"));
			xmlExtract.dumpImg(data, fos);
			fos.close();
			JOptionPane.showMessageDialog(null, "Successfully dumped " + data.getName() + " to XML");
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Error dumping ImgFile to XML", "Error", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_jButton4ActionPerformed

	private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
		//CLEAR LOADED FILES
		treeRoot = new MapleDataTreeNode("Wz File Root");
		jTree1.setModel(new DefaultTreeModel(treeRoot));
	}//GEN-LAST:event_jMenuItem13ActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				new WZExtract().setVisible(true);
			}
		});
	}

	private void dumpWzFile(MapleDataProvider dataProv) {
		MapleDataTreeNode fileNode = new MapleDataTreeNode(dataProv.getRoot().getName());
		dumpDirectory(fileNode, dataProv, "", dataProv.getRoot());
		treeRoot.add(fileNode);
	}

	private void dumpDirectory(MapleDataTreeNode parentNode, MapleDataProvider dataProv, String path, MapleDataDirectoryEntry root) {
		for (MapleDataEntry entry : root.getFiles()) {
			try {
				String filePath = path;
				if (filePath.length() > 0) {
					filePath += "/";
				}
				filePath += entry.getName();
				MapleDataTreeNode imgNode = new MapleDataTreeNode(entry.getName());
				imgNode.setNeededToLoad(true);
				imgNode.setDataProv(dataProv);
				imgNode.setDataPath(filePath);
				parentNode.add(imgNode);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		for (MapleDataDirectoryEntry child : root.getSubdirectories()) {
			MapleDataTreeNode dirNode = new MapleDataTreeNode(child.getName());
			parentNode.add(dirNode);
			dumpDirectory(dirNode, dataProv, path + (path.equals("") ? "" : "/") + child.getName(), child);
		}
	}

	private void dumpImg(MapleData wzFile, MapleDataTreeNode node) {
		dumpData(wzFile, 0, "", node);
	}

	private void dumpData(MapleData data, int level, String pathInImg, MapleDataTreeNode node) {
		MapleDataTreeNode dataNode = level == 0 ? node : new MapleDataTreeNode(data.getName());
		dataNode.setData(data);
		if (level > 0) {
			node.add(dataNode);
		}

		switch (data.getType()) {
			case PROPERTY:
				dataNode.setType(data.getName().endsWith(".img") ? MapleNodeType.IMG_FILE : MapleNodeType.DIRECTORY);
				if (data.getParent() != null && !(data.getParent() instanceof MapleEmptyDataEntity)) {
					dataNode.setMap((data.getName().length() == 13 && data.getParent().getName().startsWith("Map") && data.getParent().getName().length() == 4) || data.getName().equals("MapLogin.img"));
				}
				dumpDataList(data.getChildren(), level + 1, pathInImg + data.getName() + "/", dataNode);
				break;
			case CANVAS:
				dataNode.setType(MapleNodeType.DATA);
				dumpDataList(data.getChildren(), level + 1, pathInImg + data.getName() + "/", dataNode);
				break;
			case CONVEX:
			case EXTENDED:
				dumpDataList(data.getChildren(), level + 1, pathInImg + data.getName() + "/", dataNode);
				break;
			case SOUND:
			case UOL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case SHORT:
			case STRING:
			case VECTOR:
			case IMG_0x00:
				dataNode.setType(MapleNodeType.DATA);
				break;
			default:
				throw new RuntimeException("Unexpected img data type " + data.getType() + " path: " + pathInImg);
		}
	}

	private void dumpDataList(List<MapleData> datalist, int level, String pathInImg, MapleDataTreeNode node) {
		for (MapleData data : datalist) {
			dumpData(data, level, pathInImg, node);
		}
	}

	private void sortTree(JTree tree, TreePath parent, boolean expand) {
		// Traverse children
		TreeNode node = (TreeNode) parent.getLastPathComponent();
		if (node.getChildCount() >= 0) {
			for (Enumeration e = node.children(); e.hasMoreElements();) {
				TreeNode n = (TreeNode) e.nextElement();
				TreePath path = parent.pathByAddingChild(n);
				sortTree(tree, path, expand);
			}
		}

		if (expand) {
			tree.expandPath(parent);
		} else {
			tree.collapsePath(parent);
		}
	}

	public BufferedImage getImage(MapleData data) {
		String path = MapleDataTool.getFullDataPath(data);
		if (loadedImages.containsKey(path)) {
			return loadedImages.get(path);
		} else {
			BufferedImage image = MapleDataTool.getImage(data);
			loadedImages.put(path, image);
			return image;
		}
	}

	public void loadFile(File file) {
		long startTime = System.currentTimeMillis();
		MapleDataProvider dataProv = MapleDataProviderFactory.getDataProvider(file, true, true);
		dumpWzFile(dataProv);
		orderChildren(treeRoot);
		jTree1.setModel(new DefaultTreeModel(treeRoot));
		jLabel2.setText("Loading Time: " + (System.currentTimeMillis() - startTime) + "ms");
		jLabel3.setText("Img Files: " + imgFilesCount);
		imgFilesCount = 0;
	}

	public void loadIMGFile(File file) {
		try {
			WZIMGFile iFile = new WZIMGFile(file, -1, true, true, false, WZTool.MSEA_IV);
			MapleDataTreeNode imgNode = new MapleDataTreeNode(file.getName());
			dumpImg(iFile.getRoot(), imgNode);
			treeRoot.add(imgNode);
			orderChildren(treeRoot);
			jTree1.setModel(new DefaultTreeModel(treeRoot));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void loadListWz(File file) {

		try {
			ListWZFile listWz = new ListWZFile(file);
			jLabel1.setText("---ListWZ (" + listWz.getEntries().size() + ")---");
			String text = "";
			for (String entry : listWz.getEntries()) {
				text += entry + "\r\n";
			}
			jTextArea1.setText(text);
		} catch (FileNotFoundException fnfe) {
			jTextArea1.setText("Error: Unabled to find List.wz");
			fnfe.printStackTrace();
		}
	}

	public void loadAllFiles(File dir) {
		for (File file : dir.listFiles()) {
			if (file.getName().endsWith(".wz") && !file.getName().equals("List.wz")) {
				loadFile(file);
				wzFiles.add(MapleDataProviderFactory.getDataProvider(file, true, true));
			}
		}
	}

	public boolean isFileLoaded(String name) {
		for (MapleDataProvider wzFile : wzFiles) {
			if (wzFile.getRoot().getName().equals(name)) {
				return true;
			}
		}
		return false;
	}

	public MapleDataProvider getWzFile(String name) {
		for (MapleDataProvider wzFile : wzFiles) {
			if (wzFile.getRoot().getName().equals(name)) {
				return wzFile;
			}
		}
		return null;
	}

	public void initTreeSelectionListener() {
		jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		jTree1.addTreeSelectionListener(new TreeSelectionListener() {

			public void valueChanged(TreeSelectionEvent e) {
				MapleDataTreeNode node = (MapleDataTreeNode) jTree1.getLastSelectedPathComponent();
				if (node == null) {
					return;
				}
				
				if (node.isNeededToLoad()) {
					dumpImg(node.getDataProv().getData(node.getDataPath()), node);
					node.setNeededToLoad(false);
				}
				MapleData data = node.getData();
				jButton1.setEnabled(false);
				jButton2.setEnabled(false);
				jButton3.setEnabled(false);
				jButton4.setEnabled(false);
				jButton5.setEnabled(false);
				jButton5.setEnabled(true);//temp
				if (data != null) {
					jLabel1.setText("Type: " + data.getType().name() + " : " + node.getType().name());
					switch (data.getType()) {
						case UOL:
						case STRING:
						case INT:
						case FLOAT:
							//Value
							jTextArea1.setText(data.getData().toString());
							break;
						case VECTOR:
							//X - Y
							Point pos = MapleDataTool.getPoint(data);
							jTextArea1.setText("X: " + pos.x + "\r\nY: " + pos.y);
							break;
						case CANVAS:
							//Name - Width - Height
							BufferedImage image = getImage(data);
							jTextArea1.setText("Name: " + data.getName() + "\r\nWidth: " + image.getWidth() + "\r\nHeight: " + image.getHeight());
							jCanvasLabel1.setIcon(new ImageIcon(image));
							pngData = data;
							jButton3.setEnabled(true);
							break;
						case SOUND:
							//Name - Length
							jTextArea1.setText("Name: " + data.getName() + "\r\nLength: " + MapleDataTool.getMp3Data(data).length);
							mp3Data = data;
							jButton1.setEnabled(true);
							break;
						default:
							jTextArea1.setText("NO TEXT DATA");
							break;
					}
					if (node.isMap()) {
						jButton2.setEnabled(true);
					}
					if (node.getType() == MapleNodeType.IMG_FILE) {
						jButton4.setEnabled(true);
					/*this.textBox8.AppendText("Name\t" + i.name + "\r\n");
					this.textBox8.AppendText("Size\t" + Convert.ToString(i.size, CultureInfo.InvariantCulture) + "\r\n");
					this.textBox8.AppendText("cSum\t" + Convert.ToString(i.cs32, CultureInfo.InvariantCulture) + "\r\n");
					this.textBox8.AppendText("Offs\t" + Convert.ToString(i.offs, CultureInfo.InvariantCulture));*/
					}
				}
			}
		});
	}

	/**
	 * Orders the children of a DefaultMutableTreeNode
	 * @param parent
	 */
	private void orderChildren(MapleDataTreeNode node) {
		ArrayList children = Collections.list(node.children());
		Collections.sort(children, MapleDataTreeNode.MapleDataTreeNodeComparator);
		node.removeAllChildren();
		Iterator childrenIterator = children.iterator();
		while (childrenIterator.hasNext()) {
			MapleDataTreeNode child = (MapleDataTreeNode) childrenIterator.next();
			node.add(child);
			if (child.children().hasMoreElements()) {
				orderChildren(child);
			}
		}
	}

	
	private class WZFileFilter extends FileFilter {

		@Override
		public boolean accept(File file) {
			return (file.getName().endsWith(".wz") || file.isDirectory());
		}

		@Override
		public String getDescription() {
			return "WZ Files (*.wz)";
		}
	}

	private class IMGFileFilter extends FileFilter {

		@Override
		public boolean accept(File file) {
			return (file.getName().endsWith(".img") || file.isDirectory());
		}

		@Override
		public String getDescription() {
			return "IMG Files (*.img)";
		}
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jCanvasLabel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
